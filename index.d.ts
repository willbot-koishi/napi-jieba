/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Tag {
  word: string
  tag: string
}
export interface WordDef {
  word: string
  tag?: string
  freq?: number
}
export const enum TokenizeMode {
  Default = 0,
  Search = 1
}
export interface Token {
  word: string
  start: number
  end: number
}
export type JsJieba = Jieba
export declare class Jieba {
  constructor()
  static empty(): JsJieba
  static withWordDefs(wordDefs: Array<WordDef>): JsJieba
  cut(sentence: string, enableHmm?: boolean | undefined | null): Array<string>
  cutAll(sentence: string): Array<string>
  cutForSearch(sentence: string, enableHmm?: boolean | undefined | null): Array<string>
  cutWithMode(sentence: string, mode: TokenizeMode, enableHmm?: boolean | undefined | null): Array<string>
  tag(sentence: string, enableHmm?: boolean | undefined | null): Array<Tag>
  addWord(word: string, freq?: number | undefined | null, tag?: string | undefined | null): void
  addWordFromDef({ word, tag, freq }: WordDef): void
  addWordsFromDefs(wordDefs: Array<WordDef>): void
  loadDict(dict: Uint8Array): void
  tokenizeWithMode(sentence: string, mode: TokenizeMode, enableHmm?: boolean | undefined | null): Array<Token>
  suggestFreq(segment: string): number
}
